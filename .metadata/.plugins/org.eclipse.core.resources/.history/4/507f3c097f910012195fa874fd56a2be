package databaseOps;

import java.lang.reflect.Field;
import java.sql.*;
import java.util.TreeMap;

import models.IDbModel;

public class DatabaseOp {
	protected IDbModel table;
	protected String stmt;
	protected Field[] fields;
	protected Class<? extends IDbModel> entity;
	protected TreeMap<String, String> values;
	protected String tableName;
	
	protected DatabaseOp(IDbModel table) throws IllegalArgumentException, IllegalAccessException{
		this.table = table;
		stmt = "";
		entity = table.getClass();
		fields = entity.getFields();
		tableName = entity.getSimpleName();
		values = new  TreeMap<String, String>();
		for (Field field : fields){
			String name = field.getName();
			Object value = field.get(entity);
			values.put(name, value.toString());
		}
	}
	
	protected String columns() {
		String columns = "(";
		for (String column : values.keySet()){
			columns += column+",";
		}
		return removeLastComma(columns)+")";
	}

	protected String values() {
		String vals = "(";
		for (String value : values.values()){
			vals += value+",";
		}
		return removeLastComma(vals)+")";
	}
	
	public static Class<? extends IDbModel> from(IDbModel table) throws IllegalArgumentException, IllegalAccessException{
		return table.getClass();
	}
	
	private String removeLastComma(String s){
		// Remove last comma
		return s.substring(0, stmt.length());
	}
	
	public ResultSet execute(Statement sql) throws SQLException{ 
		return sql.executeQuery(stmt); 
	}
}
