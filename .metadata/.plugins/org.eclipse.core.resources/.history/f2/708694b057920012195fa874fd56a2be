package databaseOps;

import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import models.IDbModel;

public class Select<T extends IDbModel> extends DatabaseOp<T>{

	protected Select(T table) throws IllegalArgumentException,
			IllegalAccessException, InstantiationException {
		super(table);
	}
	
	public static <T extends IDbModel> Select<T> from(T table) throws IllegalArgumentException, IllegalAccessException, InstantiationException{
		return new Select<T>(table);
	}

	@Override
	public QueryResult<T> execute(Statement stmt) throws Exception {
		sql = "select * from "+tableName+" "+whereStr;
		
		
		
		//save results
		QueryResult<T> result = new QueryResult<T>();
		result.sql = sql;
		stmt.execute(sql);
		result.autoGeneratedKeys = stmt.getGeneratedKeys();
		result.queryResults = saveResults(stmt);
		return result;
	}

	@SuppressWarnings("unchecked")
	private Collection<T> saveResults(Statement stmt) throws SQLException, IllegalArgumentException, IllegalAccessException, InstantiationException{
		ResultSet resultSet = stmt.getResultSet();
		Collection<T> list = new ArrayList<T>();
		while(resultSet.next()){
			T  model = (T) table.getClass().newInstance();
			for (Field f : fields){
				String fieldName = f.getName();
				f.set(model, resultSet.getString(fieldName));
			}
			list.add(model);
		}
		return list;
	}
}
