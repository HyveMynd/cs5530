package cs5530;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;

import databaseOps.Insert;
import databaseOps.OP;
import databaseOps.Select;

import models.Orders;
import models.PlaceOrder;
import models.Video;

public class OrderOperations {

	public String orderVideos(Statement stmt, String id, String[] videos,
			String ccNum) throws Exception {
		
		// Map representing video, quantity
		HashMap<String, String> selections = new HashMap<String, String>();
		
		for (String video : videos){
			String[] selection = video.split(",");
			selections.put(selection[0], selection[1]);
		}
		Video video = new Video();
		double total = 0;
		
		//Add up the prices
		for (String isbn : selections.keySet()){
			Collection<Video> vid = Select.from(video)
					.where("ISBN", OP.Equal, isbn)
					.execute(stmt).queryResults;
			for (Video v : vid){
				total += Double.parseDouble(v.Price);
			}
		}
		
		// Insert a new Order
		Orders order = new Orders();
		order.CreditCardNumber = ccNum;
		order.PriceTotal = Double.toString(total);
		ResultSet autoKeys = Insert.from(order).execute(stmt).autoGeneratedKeys;
		autoKeys.next();
		String oid = autoKeys.getString(1);
		
		// Insert to PlaceOrder
		for (String isbn : selections.keySet()){
			PlaceOrder newOrder = new PlaceOrder();
			newOrder.cid = "1";
			newOrder.ISBN = isbn;
			newOrder.OrderDate = getDate().toString();
			newOrder.VideoCount = selections.get(isbn);
			newOrder.oid = oid;
			
			Insert.from(newOrder).execute(stmt);
		}
		
		return "Order Successful!";
	}
	
	public static Collection<Orders> getOrdersForCustomer(Statement stmt, String id) throws Exception{
		try{
			return Select.from(new Orders())
					.where("cid", OP.Equal, id)
					.execute(stmt).queryResults;
		}
		catch(Exception e){
            System.err.println(e.getMessage());
            throw(e);
		}
	}
	
	public static Orders getOrder(Statement stmt, String oid)throws Exception{
		try{
			return Select.from(new Orders())
					.where("oid", OP.Equal, oid)
					.execute(stmt).queryResults
					.iterator().next();
		}
		catch(Exception e){
            System.err.println(e.getMessage());
            throw(e);
		}
	}
	
	public static Collection<Orders> getOrders(Statement stmt)throws Exception{
		try{
			return Select.from(new Orders())
					.execute(stmt).queryResults;
		}
		catch(Exception e){
            System.err.println(e.getMessage());
            throw(e);
		}
	}
	
	public static Collection<PlaceOrder> getPlaceOrdersForCustomer(Statement stmt, String id) throws Exception{
		try{
			return Select.from(new PlaceOrder())
					.where("cid", OP.Equal, id)
					.execute(stmt).queryResults;
		}
		catch(Exception e){
            System.err.println(e.getMessage());
            throw(e);
		}
	}
	
	public static Collection<PlaceOrder> getPlaceOrders(Statement stmt)throws Exception{
		try{
			return Select.from(new PlaceOrder())
					.execute(stmt).queryResults;
		}
		catch(Exception e){
            System.err.println(e.getMessage());
            throw(e);
		}
	}
	
	private Date getDate(){
		java.util.Calendar cal = java.util.Calendar.getInstance();
		java.util.Date utilDate = cal.getTime();
		java.sql.Date sqlDate = new Date(utilDate.getTime());
		return sqlDate;
	}

}
