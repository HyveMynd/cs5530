package databaseOps;

import java.lang.reflect.Field;
import java.sql.*;
import java.util.TreeMap;

import models.IDbModel;

public abstract class DatabaseOp<T extends IDbModel>{
	protected IDbModel table;
	protected String sql;
	protected Field[] fields;
	protected Class<? extends IDbModel> entity;
	protected TreeMap<String, String> values;
	protected String tableName;
	protected String whereStr = "";
	
	protected DatabaseOp<T>(T table ? extends IDbModel) throws IllegalArgumentException, IllegalAccessException, InstantiationException{
		//this.table = table;
		sql = "";
		entity = table.getClass();
		fields = entity.getFields();
		tableName = entity.getSimpleName();
		values = new  TreeMap<String, String>();
		for (Field field : fields){
			String name = field.getName();
			Object value = field.get(table);
			if(value != null)
				values.put(name, "'"+value.toString()+"'");
		}
	}
	
	protected String columns() {
		String columns = "(";
		for (String column : values.keySet()){
			columns += column+",";
		}
		return removeLastComma(columns)+")";
	}

	protected String values() {
		String vals = "(";
		for (String value : values.values()){
			vals += value+",";
		}
		return removeLastComma(vals)+")";
	}
	
	private String removeLastComma(String s){
		// Remove last comma
		int i = s.lastIndexOf(',');
		return s.substring(0, i);
	}
	
	public DatabaseOp where(String column, OP operation, String value){
		switch (operation){
		case Equal:
			whereStr = "where "+column+"="+value+" ";
			break;
		case LessThan:
			whereStr = "where "+column+"<"+value+" ";
			break;
		case GreaterThan:
			break;
		case NotEqual:
			whereStr = "where "+column+">"+value+" ";
			break;
		}
		return this;
	}
	
	public abstract QueryResult execute(Statement stmt) throws SQLException;
}
